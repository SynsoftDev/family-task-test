@using WebClient.Abstractions
@using WebClient.Shared.Models
@using Domain.ViewModel


@inject ITaskDataService taskService;
@inject IMemberDataService memberService;

@namespace WebClient.Components

<style>


    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }

    .no-drop {
        border: 2px dashed red;
    }

    .can-drop {
        border: 2px dashed green;
    }

    .draggable {
        cursor: grab;
    }

        .draggable:active {
            cursor: grabbing;
        }

    .dragging {
        cursor: grabbing;
    }
</style>
@if (isFailed)
{
<div class="alert alert-danger" role="alert">
    @errorMessage
    <button type="button" class="close" @onclick="HideAlertMessage" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
}

<div class="task-wrapper">
    @foreach (var item in tasks)
    {


<div draggable="true" @ondrag="(e=>OnDragStartHandler(item))" class="draggable task-item p-3 my-3 row m-0">
    <div class="col-10 p-0">
        <Check TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => ToggleTask(item))">
            <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
        </Check>
    </div>
    <div class="col-2 p-0 d-flex justify-content-end align-items-center">
        @if (item.AssignedToId != null)
        {
            if (selectedMember != null)
            {
<div class="avtar mr-1" style="background-color: @selectedMember.Avatar;"></div> }
else
{
<div class="avtar mr-1" style="background-color: @members.FirstOrDefault(m => m.Id == item.AssignedToId).Avatar

"></div>}
}
        <img class="delete-icon" src="/assets/images/delete-icon.svg" />
    </div>
</div>}
</div>

@code  {private IEnumerable<TaskVm> tasks = new List<TaskVm>();

    private MemberVm selectedMember;

    private List<MemberVm> members = new List<MemberVm>();
    bool isFailed = false;
    string errorMessage = "";
    protected override Task OnInitializedAsync()
    {

        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;
        taskService.TasksUpdated += TaskServiceOnTasksUpdated;
        taskService.UpdateTaskFailed += TaskUpdateFailedHandler;
        taskService.TaskSelected += MemberServiceOnSelectedMemberChanged;

         LoadCurrentTasks();

        return base.OnInitializedAsync();
    }

    private void HideAlertMessage() {

        isFailed = false;
        StateHasChanged();

    }

    private void ToggleTask(TaskVm model)
    {
        taskService.ToggleTask(model.Id);
        StateHasChanged();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }



    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        isFailed = false;
        selectedMember = memberService.SelectedMember;
        members = memberService.Members.ToList();
        if (selectedMember == null || selectedMember.Id == Guid.Empty)
        {
            tasks = taskService.Tasks.ToList();

            StateHasChanged();

        }
        else
        {
            tasks = taskService.Tasks.Where(t => t.AssignedToId == selectedMember.Id).ToList();
            StateHasChanged();
        }
    }

    private void TaskServiceOnAllTasks(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void TaskUpdateFailedHandler(object sender, string error)
    {
        isFailed = true;
        errorMessage = error;
        StateHasChanged();
    }

    private void OnDragStartHandler(TaskVm taskOnDrag)
    {

        taskService.SelectDraggableTask(taskOnDrag);
    }}